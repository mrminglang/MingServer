// Package FCS comment
// This file was generated by jce2go 2.0.0
// Generated from ESDriver.jce
package FCS

import (
	"fmt"

	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// QueryPureReq struct implement
type QueryPureReq struct {
	codec.JceStructBase
	Method   string `json:"method"`
	Path     string `json:"path"`
	PostBody string `json:"postBody"`
}

func (st *QueryPureReq) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *QueryPureReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_string(&st.Method, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Path, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.PostBody, 2, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *QueryPureReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QueryPureReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *QueryPureReq) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_string(st.Method, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Path, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.PostBody, 2)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *QueryPureReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *QueryPureReq) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("method:", st.Method)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("path:", st.Path)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("postBody:", st.PostBody)

	ret = ret + " }"
	return ret
}

// QueryPureRsp struct implement
type QueryPureRsp struct {
	codec.JceStructBase
	HttpCode int32  `json:"httpCode"`
	JsonRsp  string `json:"jsonRsp"`
}

func (st *QueryPureRsp) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *QueryPureRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_int32(&st.HttpCode, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.JsonRsp, 1, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *QueryPureRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QueryPureRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *QueryPureRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_int32(st.HttpCode, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.JsonRsp, 1)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *QueryPureRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *QueryPureRsp) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("httpCode:", st.HttpCode)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("jsonRsp:", st.JsonRsp)

	ret = ret + " }"
	return ret
}

// QueryPureBatchReq struct implement
type QueryPureBatchReq struct {
	codec.JceStructBase
	IndexId2Req map[int32]QueryPureReq `json:"indexId2Req"`
}

func (st *QueryPureBatchReq) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *QueryPureBatchReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err, have = _is.SkipTo(codec.MAP, 0, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.IndexId2Req = make(map[int32]QueryPureReq)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 int32
			var v0 QueryPureReq

			err = _is.Read_int32(&k0, 0, false)
			if err != nil {
				return err
			}

			err = v0.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.IndexId2Req[k0] = v0
		}
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *QueryPureBatchReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QueryPureBatchReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *QueryPureBatchReq) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.WriteHead(codec.MAP, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.IndexId2Req)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.IndexId2Req {

		err = _os.Write_int32(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *QueryPureBatchReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *QueryPureBatchReq) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("indexId2Req:", st.IndexId2Req)

	ret = ret + " }"
	return ret
}

// QueryPureBatchRsp struct implement
type QueryPureBatchRsp struct {
	codec.JceStructBase
	IndexId2Rsp map[int32]QueryPureRsp `json:"indexId2Rsp"`
}

func (st *QueryPureBatchRsp) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *QueryPureBatchRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err, have = _is.SkipTo(codec.MAP, 0, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.IndexId2Rsp = make(map[int32]QueryPureRsp)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 int32
			var v0 QueryPureRsp

			err = _is.Read_int32(&k0, 0, false)
			if err != nil {
				return err
			}

			err = v0.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.IndexId2Rsp[k0] = v0
		}
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *QueryPureBatchRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QueryPureBatchRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *QueryPureBatchRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.WriteHead(codec.MAP, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.IndexId2Rsp)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.IndexId2Rsp {

		err = _os.Write_int32(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *QueryPureBatchRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *QueryPureBatchRsp) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("indexId2Rsp:", st.IndexId2Rsp)

	ret = ret + " }"
	return ret
}
