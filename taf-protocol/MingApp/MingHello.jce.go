// Package MingApp comment
// This file was generated by jce2go 2.0.0
// Generated from MingHello.jce
package MingApp

import (
	"fmt"

	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// TeacherList struct implement
type TeacherList struct {
	codec.JceStructBase
	NickName   string `json:"nickName"`
	HearderPic string `json:"hearderPic"`
}

func (st *TeacherList) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *TeacherList) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_string(&st.NickName, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.HearderPic, 1, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *TeacherList) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TeacherList, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *TeacherList) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_string(st.NickName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.HearderPic, 1)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *TeacherList) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *TeacherList) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("nickName:", st.NickName)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("hearderPic:", st.HearderPic)

	ret = ret + " }"
	return ret
}

// GetTeacherListReq struct implement
type GetTeacherListReq struct {
	codec.JceStructBase
	BeginIndex int32  `json:"beginIndex"`
	Count      int32  `json:"count"`
	NickName   string `json:"nickName"`
}

func (st *GetTeacherListReq) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *GetTeacherListReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_int32(&st.BeginIndex, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Count, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.NickName, 2, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetTeacherListReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetTeacherListReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetTeacherListReq) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_int32(st.BeginIndex, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Count, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.NickName, 2)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetTeacherListReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *GetTeacherListReq) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("beginIndex:", st.BeginIndex)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("count:", st.Count)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("nickName:", st.NickName)

	ret = ret + " }"
	return ret
}

// GetTeacherListRsp struct implement
type GetTeacherListRsp struct {
	codec.JceStructBase
	Sum        int32         `json:"sum"`
	CacheValue string        `json:"cacheValue"`
	Teachers   []TeacherList `json:"teachers"`
}

func (st *GetTeacherListRsp) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *GetTeacherListRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_int32(&st.Sum, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.CacheValue, 1, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Teachers = make([]TeacherList, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.Teachers[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetTeacherListRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetTeacherListRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetTeacherListRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_int32(st.Sum, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.CacheValue, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Teachers)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Teachers {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetTeacherListRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *GetTeacherListRsp) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("sum:", st.Sum)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("cacheValue:", st.CacheValue)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("teachers:", st.Teachers)

	ret = ret + " }"
	return ret
}
