// Package MingApp comment
// This file was generated by jce2go 2.0.0
// Generated from MingHello.jce
package MingApp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"gitlab.upchinaproduct.com/taf/tafgo/taf"
	m "gitlab.upchinaproduct.com/taf/tafgo/taf/model"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/codec"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/res/basef"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/res/requestf"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/wup"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/util/current"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/util/tools"
	"gitlab.upchinaproduct.com/taf/tafgo/taf/util/trace"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//MingHello struct
type MingHello struct {
	s m.Servant
}

//GetTeacherList is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetTeacherList(req *GetTeacherListReq, rsp *GetTeacherListRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)
	tafCtx := context.Background()

	err = _obj.s.Taf_invoke(tafCtx, 0, "getTeacherList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetTeacherListWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetTeacherListWithContext(tafCtx context.Context, req *GetTeacherListReq, rsp *GetTeacherListRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tafCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(_os.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetTeacherList", 0, traceParam, "")
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 0, "getTeacherList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(_is.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["taf_ret"] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetTeacherList", int(_resp.IRet), traceParam, "")
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetTeacherListOneWayWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetTeacherListOneWayWithContext(tafCtx context.Context, req *GetTeacherListReq, rsp *GetTeacherListRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 1, "getTeacherList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetStringCache is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetStringCache(req *SetStringCacheReq, rsp *SetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)
	tafCtx := context.Background()

	err = _obj.s.Taf_invoke(tafCtx, 0, "setStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetStringCacheWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetStringCacheWithContext(tafCtx context.Context, req *SetStringCacheReq, rsp *SetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tafCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(_os.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, taf.GetClientConfig().ModuleName, _obj.s.Name(), "SetStringCache", 0, traceParam, "")
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 0, "setStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(_is.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["taf_ret"] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, taf.GetClientConfig().ModuleName, _obj.s.Name(), "SetStringCache", int(_resp.IRet), traceParam, "")
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetStringCacheOneWayWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetStringCacheOneWayWithContext(tafCtx context.Context, req *SetStringCacheReq, rsp *SetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 1, "setStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetStringCache is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetStringCache(req *GetStringCacheReq, rsp *GetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)
	tafCtx := context.Background()

	err = _obj.s.Taf_invoke(tafCtx, 0, "getStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetStringCacheWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetStringCacheWithContext(tafCtx context.Context, req *GetStringCacheReq, rsp *GetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tafCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(_os.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetStringCache", 0, traceParam, "")
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 0, "getStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(_is.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["taf_ret"] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetStringCache", int(_resp.IRet), traceParam, "")
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetStringCacheOneWayWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetStringCacheOneWayWithContext(tafCtx context.Context, req *GetStringCacheReq, rsp *GetStringCacheRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 1, "getStringCache", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetESData is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetESData(req *SetESDataReq, rsp *SetESDataRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)
	tafCtx := context.Background()

	err = _obj.s.Taf_invoke(tafCtx, 0, "setESData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetESDataWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetESDataWithContext(tafCtx context.Context, req *SetESDataReq, rsp *SetESDataRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tafCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(_os.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, taf.GetClientConfig().ModuleName, _obj.s.Name(), "SetESData", 0, traceParam, "")
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 0, "setESData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(_is.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["taf_ret"] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, taf.GetClientConfig().ModuleName, _obj.s.Name(), "SetESData", int(_resp.IRet), traceParam, "")
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetESDataOneWayWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) SetESDataOneWayWithContext(tafCtx context.Context, req *SetESDataReq, rsp *SetESDataRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 1, "setESData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetESDataById is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetESDataById(req *GetESDataByIdReq, rsp *GetESDataByIdRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)
	tafCtx := context.Background()

	err = _obj.s.Taf_invoke(tafCtx, 0, "getESDataById", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetESDataByIdWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetESDataByIdWithContext(tafCtx context.Context, req *GetESDataByIdReq, rsp *GetESDataByIdRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tafCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(_os.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetESDataById", 0, traceParam, "")
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 0, "getESDataById", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(_is.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["taf_ret"] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		taf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, taf.GetClientConfig().ModuleName, _obj.s.Name(), "GetESDataById", int(_resp.IRet), traceParam, "")
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetESDataByIdOneWayWithContext is the proxy function for the method defined in the jce file, with the context
func (_obj *MingHello) GetESDataByIdOneWayWithContext(tafCtx context.Context, req *GetESDataByIdReq, rsp *GetESDataByIdRsp, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.BasePacket)

	err = _obj.s.Taf_invoke(tafCtx, 1, "getESDataById", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *MingHello) SetServant(s m.Servant) {
	_obj.s = s
}

//TafSetTimeout sets the timeout for the servant which is in ms.
func (_obj *MingHello) TafSetTimeout(t int) {
	_obj.s.TafSetTimeout(t)
}

//TafSetProtocol sets the protocol for the servant.
func (_obj *MingHello) TafSetProtocol(p m.Protocol) {
	_obj.s.TafSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *MingHello) AddServant(imp _impMingHello, obj string) {
	taf.AddServant(_obj, imp, obj)
}

//AddServantWithContext adds servant  for the service with context.
func (_obj *MingHello) AddServantWithContext(imp _impMingHelloWithContext, obj string) {
	taf.AddServantWithContext(_obj, imp, obj)
}

type _impMingHello interface {
	GetTeacherList(req *GetTeacherListReq, rsp *GetTeacherListRsp) (ret int32, err error)
	SetStringCache(req *SetStringCacheReq, rsp *SetStringCacheRsp) (ret int32, err error)
	GetStringCache(req *GetStringCacheReq, rsp *GetStringCacheRsp) (ret int32, err error)
	SetESData(req *SetESDataReq, rsp *SetESDataRsp) (ret int32, err error)
	GetESDataById(req *GetESDataByIdReq, rsp *GetESDataByIdRsp) (ret int32, err error)
}
type _impMingHelloWithContext interface {
	GetTeacherList(tafCtx context.Context, req *GetTeacherListReq, rsp *GetTeacherListRsp) (ret int32, err error)
	SetStringCache(tafCtx context.Context, req *SetStringCacheReq, rsp *SetStringCacheRsp) (ret int32, err error)
	GetStringCache(tafCtx context.Context, req *GetStringCacheReq, rsp *GetStringCacheRsp) (ret int32, err error)
	SetESData(tafCtx context.Context, req *SetESDataReq, rsp *SetESDataRsp) (ret int32, err error)
	GetESDataById(tafCtx context.Context, req *GetESDataByIdReq, rsp *GetESDataByIdRsp) (ret int32, err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the jce file. _withContext shows using context or not.
func (_obj *MingHello) Dispatch(tafCtx context.Context, _val interface{}, tafReq *requestf.BasePacket, tafResp *requestf.BasePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tafReq.SBuffer))
	_os := codec.NewBuffer()
	switch tafReq.SFuncName {
	case "getTeacherList":
		var req GetTeacherListReq
		var rsp GetTeacherListRsp

		if tafReq.IVersion == basef.JCEVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_reqWup_ := wup.NewUniAttribute()
			_reqWup_.Decode(_is)

			var _wupBuffer_ []byte

			_reqWup_.GetBuffer("req", &_wupBuffer_)
			_is.Reset(_wupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				req.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tafReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tafCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(_is.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getTeacherList", 0, traceParam, "")
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impMingHello)
			_funRet_, err = _imp.GetTeacherList(&req, &rsp)
		} else {
			_imp := _val.(_impMingHelloWithContext)
			_funRet_, err = _imp.GetTeacherList(tafCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if tafReq.IVersion == basef.JCEVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_wupRsp_ := wup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("", _os.ToBytes())
			_wupRsp_.PutBuffer("taf_ret", _os.ToBytes())

			_os.Reset()
			err = rsp.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("rsp", _os.ToBytes())

			_os.Reset()
			err = _wupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tafReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["taf_ret"] = _funRet_
			_rspJson_[""] = _funRet_
			_rspJson_["rsp"] = rsp

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(_os.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = _funRet_
				value["taf_ret"] = _funRet_
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getTeacherList", 0, traceParam, "")
		}

	case "setStringCache":
		var req SetStringCacheReq
		var rsp SetStringCacheRsp

		if tafReq.IVersion == basef.JCEVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_reqWup_ := wup.NewUniAttribute()
			_reqWup_.Decode(_is)

			var _wupBuffer_ []byte

			_reqWup_.GetBuffer("req", &_wupBuffer_)
			_is.Reset(_wupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				req.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tafReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tafCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(_is.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, taf.GetClientConfig().ModuleName, tafReq.SServantName, "setStringCache", 0, traceParam, "")
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impMingHello)
			_funRet_, err = _imp.SetStringCache(&req, &rsp)
		} else {
			_imp := _val.(_impMingHelloWithContext)
			_funRet_, err = _imp.SetStringCache(tafCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if tafReq.IVersion == basef.JCEVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_wupRsp_ := wup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("", _os.ToBytes())
			_wupRsp_.PutBuffer("taf_ret", _os.ToBytes())

			_os.Reset()
			err = rsp.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("rsp", _os.ToBytes())

			_os.Reset()
			err = _wupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tafReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["taf_ret"] = _funRet_
			_rspJson_[""] = _funRet_
			_rspJson_["rsp"] = rsp

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(_os.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = _funRet_
				value["taf_ret"] = _funRet_
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, taf.GetClientConfig().ModuleName, tafReq.SServantName, "setStringCache", 0, traceParam, "")
		}

	case "getStringCache":
		var req GetStringCacheReq
		var rsp GetStringCacheRsp

		if tafReq.IVersion == basef.JCEVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_reqWup_ := wup.NewUniAttribute()
			_reqWup_.Decode(_is)

			var _wupBuffer_ []byte

			_reqWup_.GetBuffer("req", &_wupBuffer_)
			_is.Reset(_wupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				req.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tafReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tafCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(_is.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getStringCache", 0, traceParam, "")
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impMingHello)
			_funRet_, err = _imp.GetStringCache(&req, &rsp)
		} else {
			_imp := _val.(_impMingHelloWithContext)
			_funRet_, err = _imp.GetStringCache(tafCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if tafReq.IVersion == basef.JCEVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_wupRsp_ := wup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("", _os.ToBytes())
			_wupRsp_.PutBuffer("taf_ret", _os.ToBytes())

			_os.Reset()
			err = rsp.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("rsp", _os.ToBytes())

			_os.Reset()
			err = _wupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tafReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["taf_ret"] = _funRet_
			_rspJson_[""] = _funRet_
			_rspJson_["rsp"] = rsp

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(_os.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = _funRet_
				value["taf_ret"] = _funRet_
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getStringCache", 0, traceParam, "")
		}

	case "setESData":
		var req SetESDataReq
		var rsp SetESDataRsp

		if tafReq.IVersion == basef.JCEVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_reqWup_ := wup.NewUniAttribute()
			_reqWup_.Decode(_is)

			var _wupBuffer_ []byte

			_reqWup_.GetBuffer("req", &_wupBuffer_)
			_is.Reset(_wupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				req.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tafReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tafCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(_is.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, taf.GetClientConfig().ModuleName, tafReq.SServantName, "setESData", 0, traceParam, "")
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impMingHello)
			_funRet_, err = _imp.SetESData(&req, &rsp)
		} else {
			_imp := _val.(_impMingHelloWithContext)
			_funRet_, err = _imp.SetESData(tafCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if tafReq.IVersion == basef.JCEVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_wupRsp_ := wup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("", _os.ToBytes())
			_wupRsp_.PutBuffer("taf_ret", _os.ToBytes())

			_os.Reset()
			err = rsp.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("rsp", _os.ToBytes())

			_os.Reset()
			err = _wupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tafReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["taf_ret"] = _funRet_
			_rspJson_[""] = _funRet_
			_rspJson_["rsp"] = rsp

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(_os.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = _funRet_
				value["taf_ret"] = _funRet_
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, taf.GetClientConfig().ModuleName, tafReq.SServantName, "setESData", 0, traceParam, "")
		}

	case "getESDataById":
		var req GetESDataByIdReq
		var rsp GetESDataByIdRsp

		if tafReq.IVersion == basef.JCEVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_reqWup_ := wup.NewUniAttribute()
			_reqWup_.Decode(_is)

			var _wupBuffer_ []byte

			_reqWup_.GetBuffer("req", &_wupBuffer_)
			_is.Reset(_wupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				req.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tafReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tafCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(_is.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getESDataById", 0, traceParam, "")
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impMingHello)
			_funRet_, err = _imp.GetESDataById(&req, &rsp)
		} else {
			_imp := _val.(_impMingHelloWithContext)
			_funRet_, err = _imp.GetESDataById(tafCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if tafReq.IVersion == basef.JCEVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tafReq.IVersion == basef.WUPVERSION {
			_wupRsp_ := wup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("", _os.ToBytes())
			_wupRsp_.PutBuffer("taf_ret", _os.ToBytes())

			_os.Reset()
			err = rsp.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_wupRsp_.PutBuffer("rsp", _os.ToBytes())

			_os.Reset()
			err = _wupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tafReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["taf_ret"] = _funRet_
			_rspJson_[""] = _funRet_
			_rspJson_["rsp"] = rsp

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(_os.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = _funRet_
				value["taf_ret"] = _funRet_
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			taf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, taf.GetClientConfig().ModuleName, tafReq.SServantName, "getESDataById", 0, traceParam, "")
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tafCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tafCtx)
	if ok && c != nil {
		_context = c
	}
	*tafResp = requestf.BasePacket{
		IVersion:     tafReq.IVersion,
		CPacketType:  0,
		IRequestId:   tafReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
